#include "keycode.h"
#include "keycode_legacy.h"
#include "quantum_keycodes.h"
#include QMK_KEYBOARD_H
#include <stdio.h>

#define OSM_LCTL OSM(MOD_LCTL)
#define OSM_LSFT OSM(MOD_LSFT)
#define OSM_HYPR OSM(MOD_HYPR)

enum sofle_layers {
    /* _M_XYZ = Mac Os, _W_XYZ = Win/Linux */
    _QWERTY,
    _COLEMAK,
    _LOWER,
    _RAISE,
    _ADJUST,
};

enum custom_keycodes {
    KC_QWERTY = SAFE_RANGE,
    KC_COLEMAK,
    KC_LOWER,
    KC_RAISE,
    KC_ADJUST,
    KC_PRVWD,
    KC_NXTWD,
    KC_LSTRT,
    KC_LEND,
    KC_DLINE
};

#define LT_SPC LT(_LOWER, KC_SPC)
#define LT_BSPC LT(_RAISE, KC_BSPC)
#define LT_ESC LGUI_T(KC_ESC)

// clang-format off
const uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {
/* ┌──────┬──────┬──────┬──────┬──────┬──────┐                    ┌──────┬──────┬──────┬──────┬──────┬──────┐
 * │ ESC  │  1   │  2   │  3   │  4   │  5   │                    │  6   │  7   │  8   │  9   │  0   │ DEL  │
 * ├──────┼──────┼──────┼──────┼──────┼──────┤                    ├──────┼──────┼──────┼──────┼──────┼──────┤
 * │  `   │  Q   │  W   │  E   │  R   │  T   │                    │  Y   │  U   │  I   │  O   │  P   │MINUS │
 * ├──────┼──────┼──────┼──────┼──────┼──────┤                    ├──────┼──────┼──────┼──────┼──────┼──────┤
 * │ TAB  │  A   │  S   │  D   │  F   │  G   │┌──────┐    ┌──────┐│  H   │  J   │  K   │  L   │ : ;  │ ' "  │
 * ├──────┼──────┼──────┼──────┼──────┼──────┤│ MUTE │    │      │├──────┼──────┼──────┼──────┼──────┼──────┤
 * │ LCTL │  Z   │  X   │  C   │  V   │  B   │└──────┘    └──────┘│  N   │  M   │ , <  │ . >  │ / ?  │  R⇧  │
 * └──────┴──────┼──────┼──────┼──────┼──────┼───────┐    ┌───────┼──────┼──────┼──────┼──────┼──────┴──────┘
 *               │ HYPR │  L⎇  │LT_ESC│LT_SPC│LALT(KC│    │  ENT  │LT_BSP│ LSFT │  R⎇  │  R⌘  │
 *               │      │      │      │      │       │    │       │      │      │      │      │
 *               └──────┴──────┴──────┴──────┴───────┘    └───────┴──────┴──────┴──────┴──────┘
 *                                                                                   generated by [keymapviz] */
[_QWERTY] = LAYOUT(
  KC_ESC,   KC_1,   KC_2,    KC_3,    KC_4,    KC_5,                     KC_6,    KC_7,    KC_8,    KC_9,   KC_0,    KC_DEL,
  KC_GRV,   KC_Q,   KC_W,    KC_E,    KC_R,    KC_T,                     KC_Y,    KC_U,    KC_I,    KC_O,   KC_P,    KC_MINUS,
  KC_TAB,   KC_A,   KC_S,    KC_D,    KC_F,    KC_G,                     KC_H,    KC_J,    KC_K,    KC_L,   KC_SCLN, KC_QUOT,
  OSM_LCTL, KC_Z,   KC_X,    KC_C,    KC_V,    KC_B, KC_MUTE,    XXXXXXX,KC_N,    KC_M,    KC_COMM, KC_DOT, KC_SLSH, KC_RSFT,
              KC_HYPR, KC_LALT, LT_ESC, LT_SPC, LALT(KC_SPC),    KC_ENT, LT_BSPC, OSM_LSFT,KC_RALT, KC_RGUI
),
/* ┌──────┬──────┬──────┬──────┬──────┬──────┐                    ┌──────┬──────┬──────┬──────┬──────┬──────┐
 * │  `   │  1   │  2   │  3   │  4   │  5   │                    │  6   │  7   │  8   │  9   │  0   │  `   │
 * ├──────┼──────┼──────┼──────┼──────┼──────┤                    ├──────┼──────┼──────┼──────┼──────┼──────┤
 * │ ESC  │  Q   │  W   │  F   │  P   │  G   │                    │  J   │  L   │  U   │  Y   │ : ;  │ BSPC │
 * ├──────┼──────┼──────┼──────┼──────┼──────┤                    ├──────┼──────┼──────┼──────┼──────┼──────┤
 * │ TAB  │  A   │  R   │  S   │  T   │  D   │┌──────┐    ┌──────┐│  H   │  N   │  E   │  I   │  O   │ ' "  │
 * ├──────┼──────┼──────┼──────┼──────┼──────┤│ MUTE │    │      │├──────┼──────┼──────┼──────┼──────┼──────┤
 * │  L⇧  │  Z   │  X   │  C   │  V   │  B   │└──────┘    └──────┘│  K   │  M   │ , <  │ . >  │ / ?  │  `   │
 * └──────┴──────┼──────┼──────┼──────┼──────┼───────┐    ┌───────┼──────┼──────┼──────┼──────┼──────┴──────┘
 *               │  L⌘  │  L⎇  │LCTRL │LOWER │  ENT  │    │  SPC  │RAISE │RCTRL │  R⎇  │  R⌘  │
 *               │      │      │      │      │       │    │       │      │      │      │      │
 *               └──────┴──────┴──────┴──────┴───────┘    └───────┴──────┴──────┴──────┴──────┘
 *                                                                                   generated by [keymapviz] */
[_COLEMAK] = LAYOUT(
  KC_GRV,   KC_1,   KC_2,    KC_3,    KC_4,    KC_5,                      KC_6,    KC_7,    KC_8,    KC_9,    KC_0,  KC_GRV,
  KC_ESC,   KC_Q,   KC_W,    KC_F,    KC_P,    KC_G,                      KC_J,    KC_L,    KC_U,    KC_Y, KC_SCLN,  KC_BSPC,
  KC_TAB,   KC_A,   KC_R,    KC_S,    KC_T,    KC_D,                      KC_H,    KC_N,    KC_E,    KC_I,    KC_O,  KC_QUOT,
  KC_LSFT,  KC_Z,   KC_X,    KC_C,    KC_V,    KC_B, KC_MUTE,      XXXXXXX,KC_K,    KC_M, KC_COMM,  KC_DOT, KC_SLSH, KC_GRV,
                 KC_LGUI,KC_LALT,KC_LCTRL,KC_LOWER, KC_ENT,      KC_SPC,  KC_RAISE, KC_RCTRL, KC_RALT, KC_RGUI
),
/* ┌──────┬──────┬──────┬──────┬──────┬──────┐                    ┌──────┬──────┬──────┬──────┬──────┬──────┐
 * │      │  F1  │  F2  │  F3  │  F4  │  F5  │                    │  F6  │  F7  │  F8  │  F9  │ F10  │ F11  │
 * ├──────┼──────┼──────┼──────┼──────┼──────┤                    ├──────┼──────┼──────┼──────┼──────┼──────┤
 * │  `   │  !   │  @   │  #   │  {   │  }   │                    │      │  +   │  =   │      │      │  |   │
 * ├──────┼──────┼──────┼──────┼──────┼──────┤                    ├──────┼──────┼──────┼──────┼──────┼──────┤
 * │      │  $   │  %   │  ^   │  (   │  )   │┌──────┐    ┌──────┐│  ◁   │  ▽   │  △   │  ▷   │      │      │
 * ├──────┼──────┼──────┼──────┼──────┼──────┤│      │    │      │├──────┼──────┼──────┼──────┼──────┼──────┤
 * │      │  &   │  *   │  `   │  [   │  ]   │└──────┘    └──────┘│      │MINUS │  _   │      │ \ |  │      │
 * └──────┴──────┼──────┼──────┼──────┼──────┼───────┐    ┌───────┼──────┼──────┼──────┼──────┼──────┴──────┘
 *               │      │      │      │      │       │    │       │      │      │      │      │
 *               │      │      │      │      │       │    │       │      │      │      │      │
 *               └──────┴──────┴──────┴──────┴───────┘    └───────┴──────┴──────┴──────┴──────┘
 *                                                                                   generated by [keymapviz] */
[_LOWER] = LAYOUT(
  _______,  KC_F1,   KC_F2,   KC_F3,   KC_F4,   KC_F5,                           KC_F6,   KC_F7,    KC_F8,   KC_F9,    KC_F10,   KC_F11,
  KC_GRV,   KC_EXLM, KC_AT,   KC_HASH, KC_LCBR, KC_RCBR,                         _______, KC_PLUS,  KC_EQL, _______,  _______, KC_PIPE,
  _______,  KC_DLR,  KC_PERC, KC_CIRC, KC_LPRN, KC_RPRN,                         KC_LEFT, KC_DOWN,  KC_UP,   KC_RIGHT, _______, _______,
  _______,  KC_AMPR, KC_ASTR, KC_GRV,  KC_LBRC, KC_RBRC, _______,       _______, _______, KC_MINUS, KC_UNDS, _______,  KC_BSLS, _______,
                     _______, _______, _______, _______, _______,       _______, _______, _______, _______, _______
),
/* ┌──────┬──────┬──────┬──────┬──────┬──────┐                    ┌──────┬──────┬──────┬──────┬──────┬──────┐
 * │      │      │      │      │      │      │                    │      │      │      │      │      │      │
 * ├──────┼──────┼──────┼──────┼──────┼──────┤                    ├──────┼──────┼──────┼──────┼──────┼──────┤
 * │      │ Ins  │PrintS│ MENU │      │      │                    │ PGUP │PRVWD │  △   │NXTWD │DLINE │ BSPC │
 * ├──────┼──────┼──────┼──────┼──────┼──────┤                    ├──────┼──────┼──────┼──────┼──────┼──────┤
 * │      │  L⎇  │  L^  │  L⇧  │      │ CAPS │┌──────┐    ┌──────┐│ PGDN │  ◁   │  ▽   │ RGHT │ DEL  │ BSPC │
 * ├──────┼──────┼──────┼──────┼──────┼──────┤│ MPLY │    │      │├──────┼──────┼──────┼──────┼──────┼──────┤
 * │      │ UNDO │ CUT  │ COPY │PASTE │      │└──────┘    └──────┘│      │LSTRT │      │ LEND │      │      │
 * └──────┴──────┼──────┼──────┼──────┼──────┼───────┐    ┌───────┼──────┼──────┼──────┼──────┼──────┴──────┘
 *               │      │      │      │      │C(A(KC_│    │       │      │      │      │      │
 *               │      │      │      │      │       │    │       │      │      │      │      │
 *               └──────┴──────┴──────┴──────┴───────┘    └───────┴──────┴──────┴──────┴──────┘
 *                                                                                   generated by [keymapviz] */
[_RAISE] = LAYOUT(
  _______, _______ , _______ , _______ , _______ , _______,                           _______,  _______  , _______,  _______ ,  _______ ,_______,
  _______,  KC_INS,  KC_PSCR,   KC_APP,  XXXXXXX, XXXXXXX,                        KC_PGUP, KC_PRVWD,   KC_UP, KC_NXTWD,KC_DLINE, KC_BSPC,
  _______, KC_LALT,  KC_LCTL,  KC_LSFT,  XXXXXXX, KC_CAPS,                       KC_PGDN,  KC_LEFT, KC_DOWN, KC_RGHT,  KC_DEL, KC_BSPC,
  _______,KC_UNDO, KC_CUT, KC_COPY, KC_PASTE, XXXXXXX,  KC_MPLY,       _______,  XXXXXXX, KC_LSTRT, XXXXXXX, KC_LEND,   XXXXXXX, _______,
               _______, _______, _______, _______, C(A(KC_SPC)),       _______, _______, _______, _______, _______
),
/* ┌──────┬──────┬──────┬──────┬──────┬──────┐                    ┌──────┬──────┬──────┬──────┬──────┬──────┐
 * │      │      │      │      │      │      │                    │      │      │      │      │      │      │
 * ├──────┼──────┼──────┼──────┼──────┼──────┤                    ├──────┼──────┼──────┼──────┼──────┼──────┤
 * │RESET │      │QWERTY│COLEMA│CG_TOG│      │                    │      │      │      │      │      │      │
 * ├──────┼──────┼──────┼──────┼──────┼──────┤                    ├──────┼──────┼──────┼──────┼──────┼──────┤
 * │      │      │CG_TOG│      │      │      │┌──────┐    ┌──────┐│      │ VOLD │ MUTE │ VOLU │      │      │
 * ├──────┼──────┼──────┼──────┼──────┼──────┤│      │    │      │├──────┼──────┼──────┼──────┼──────┼──────┤
 * │      │      │      │      │      │      │└──────┘    └──────┘│      │ MPRV │ MPLY │ MNXT │      │      │
 * └──────┴──────┼──────┼──────┼──────┼──────┼───────┐    ┌───────┼──────┼──────┼──────┼──────┼──────┴──────┘
 *               │      │      │      │      │       │    │       │      │      │      │      │
 *               │      │      │      │      │       │    │       │      │      │      │      │
 *               └──────┴──────┴──────┴──────┴───────┘    └───────┴──────┴──────┴──────┴──────┘
 *                                                                                   generated by [keymapviz] */
  [_ADJUST] = LAYOUT(
  XXXXXXX , XXXXXXX,  XXXXXXX ,  XXXXXXX , XXXXXXX, XXXXXXX,                     XXXXXXX, XXXXXXX, XXXXXXX, XXXXXXX, XXXXXXX, XXXXXXX,
  RESET  , XXXXXXX,KC_QWERTY,KC_COLEMAK,CG_TOGG,XXXXXXX,                     XXXXXXX, XXXXXXX, XXXXXXX, XXXXXXX, XXXXXXX, XXXXXXX,
  XXXXXXX , XXXXXXX,CG_TOGG, XXXXXXX,    XXXXXXX,  XXXXXXX,                     XXXXXXX, KC_VOLD, KC_MUTE, KC_VOLU, XXXXXXX, XXXXXXX,
  XXXXXXX , XXXXXXX, XXXXXXX, XXXXXXX,    XXXXXXX,  XXXXXXX, XXXXXXX,     XXXXXXX, XXXXXXX, KC_MPRV, KC_MPLY, KC_MNXT, XXXXXXX, XXXXXXX,
                   _______, _______, _______, _______, _______,     _______, _______, _______, _______, _______
  )
};

#ifdef OLED_ENABLE

char wpm_text[9];
static void print_wpm(void) {
    int currwpm = get_current_wpm();
    sprintf(wpm_text, "WPM: %i", currwpm);
    oled_write_P(PSTR("\n\n\n"), false);
    oled_write_ln(wpm_text, false);
}

static void print_status_narrow(void) {
    // Print current mode
    oled_write_P(PSTR("\n\n"), false);
    oled_write_ln_P(PSTR("MODE"), false);
    oled_write_ln_P(PSTR(""), false);

    switch (get_highest_layer(default_layer_state)) {
        case _QWERTY:
            oled_write_ln_P(PSTR("QWRT"), false);
            break;
        case _COLEMAK:
            oled_write_ln_P(PSTR("Clmk"), false);
            break;
        default:
            oled_write_P(PSTR("Undef"), false);
    }
    oled_write_P(PSTR("\n\n"), false);
    // Print current layer
    oled_write_ln_P(PSTR("LAYER"), false);
    switch (get_highest_layer(layer_state)) {
        case _COLEMAK:
        case _QWERTY:
            oled_write_P(PSTR("BASE\n"), false);
            break;
        case _RAISE:
            oled_write_P(PSTR("RAISE"), false);
            break;
        case _LOWER:
            oled_write_P(PSTR("LOWER"), false);
            break;
        case _ADJUST:
            oled_write_P(PSTR("ADJ\n"), false);
            break;
        default:
            oled_write_ln_P(PSTR("???"), false);
    }
    oled_write_P(PSTR("\n\n"), false);
    led_t led_usb_state = host_keyboard_led_state();
    oled_write_ln_P(PSTR("CAPS"), led_usb_state.caps_lock);
}

oled_rotation_t oled_init_user(oled_rotation_t rotation) {
    if (is_keyboard_master()) {
        return OLED_ROTATION_270;
    }
    /* return rotation; */
    return OLED_ROTATION_270;
}

bool oled_task_user(void) {
    if (is_keyboard_master()) {
        print_status_narrow();
    } else {
        print_wpm();
    }
    return false;
}

#endif

// activate adjust layer
layer_state_t layer_state_set_user(layer_state_t state) {
  return update_tri_layer_state(state, _LOWER, _RAISE, _ADJUST);
}

bool process_record_user(uint16_t keycode, keyrecord_t *record) {
    switch (keycode) {
        case KC_QWERTY:
            if (record->event.pressed) {
                set_single_persistent_default_layer(_QWERTY);
            }
            return false;
        case KC_COLEMAK:
            if (record->event.pressed) {
                set_single_persistent_default_layer(_COLEMAK);
            }
            return false;
        case KC_LOWER:
            if (record->event.pressed) {
                layer_on(_LOWER);
                update_tri_layer(_LOWER, _RAISE, _ADJUST);
            } else {
                layer_off(_LOWER);
                update_tri_layer(_LOWER, _RAISE, _ADJUST);
            }
            return false;
        case KC_RAISE:
            if (record->event.pressed) {
                layer_on(_RAISE);
                update_tri_layer(_LOWER, _RAISE, _ADJUST);
            } else {
                layer_off(_RAISE);
                update_tri_layer(_LOWER, _RAISE, _ADJUST);
            }
            return false;
        case KC_ADJUST:
            if (record->event.pressed) {
                layer_on(_ADJUST);
            } else {
                layer_off(_ADJUST);
            }
            return false;
        case KC_PRVWD:
            if (record->event.pressed) {
                if (keymap_config.swap_lctl_lgui) {
                    register_mods(mod_config(MOD_LALT));
                    register_code(KC_LEFT);
                } else {
                    register_mods(mod_config(MOD_LCTL));
                    register_code(KC_LEFT);
                }
            } else {
                if (keymap_config.swap_lctl_lgui) {
                    unregister_mods(mod_config(MOD_LALT));
                    unregister_code(KC_LEFT);
                } else {
                    unregister_mods(mod_config(MOD_LCTL));
                    unregister_code(KC_LEFT);
                }
            }
            break;
        case KC_NXTWD:
             if (record->event.pressed) {
                if (keymap_config.swap_lctl_lgui) {
                    register_mods(mod_config(MOD_LALT));
                    register_code(KC_RIGHT);
                } else {
                    register_mods(mod_config(MOD_LCTL));
                    register_code(KC_RIGHT);
                }
            } else {
                if (keymap_config.swap_lctl_lgui) {
                    unregister_mods(mod_config(MOD_LALT));
                    unregister_code(KC_RIGHT);
                } else {
                    unregister_mods(mod_config(MOD_LCTL));
                    unregister_code(KC_RIGHT);
                }
            }
            break;
        case KC_LSTRT:
            if (record->event.pressed) {
                if (keymap_config.swap_lctl_lgui) {
                     //CMD-arrow on Mac, but we have CTL and GUI swapped
                    register_mods(mod_config(MOD_LCTL));
                    register_code(KC_LEFT);
                } else {
                    register_code(KC_HOME);
                }
            } else {
                if (keymap_config.swap_lctl_lgui) {
                    unregister_mods(mod_config(MOD_LCTL));
                    unregister_code(KC_LEFT);
                } else {
                    unregister_code(KC_HOME);
                }
            }
            break;
        case KC_LEND:
            if (record->event.pressed) {
                if (keymap_config.swap_lctl_lgui) {
                    //CMD-arrow on Mac, but we have CTL and GUI swapped
                    register_mods(mod_config(MOD_LCTL));
                    register_code(KC_RIGHT);
                } else {
                    register_code(KC_END);
                }
            } else {
                if (keymap_config.swap_lctl_lgui) {
                    unregister_mods(mod_config(MOD_LCTL));
                    unregister_code(KC_RIGHT);
                } else {
                    unregister_code(KC_END);
                }
            }
            break;
        case KC_DLINE:
            if (record->event.pressed) {
                register_mods(mod_config(MOD_LCTL));
                register_code(KC_BSPC);
            } else {
                unregister_mods(mod_config(MOD_LCTL));
                unregister_code(KC_BSPC);
            }
            break;
        case KC_COPY:
            if (record->event.pressed) {
                register_mods(mod_config(MOD_LCTL));
                register_code(KC_C);
            } else {
                unregister_mods(mod_config(MOD_LCTL));
                unregister_code(KC_C);
            }
            return false;
        case KC_PASTE:
            if (record->event.pressed) {
                register_mods(mod_config(MOD_LCTL));
                register_code(KC_V);
            } else {
                unregister_mods(mod_config(MOD_LCTL));
                unregister_code(KC_V);
            }
            return false;
        case KC_CUT:
            if (record->event.pressed) {
                register_mods(mod_config(MOD_LCTL));
                register_code(KC_X);
            } else {
                unregister_mods(mod_config(MOD_LCTL));
                unregister_code(KC_X);
            }
            return false;
            break;
        case KC_UNDO:
            if (record->event.pressed) {
                register_mods(mod_config(MOD_LCTL));
                register_code(KC_Z);
            } else {
                unregister_mods(mod_config(MOD_LCTL));
                unregister_code(KC_Z);
            }
            return false;
    }
    return true;
}

#ifdef ENCODER_ENABLE

bool encoder_update_user(uint8_t index, bool clockwise) {
    if (index == 0) {
      if (layer_state_is(_RAISE)) {
          if (clockwise) {
            tap_code(KC_MNXT);
        } else {
            tap_code(KC_MPRV);
        }
      } else {
          if (clockwise) {
            tap_code(KC_VOLU);
        } else {
            tap_code(KC_VOLD);
        }
      }
    } else if (index == 1) {
        if (clockwise) {
            tap_code(KC_PGDOWN);
        } else {
            tap_code(KC_PGUP);
        }
    }
    return true;
}

#endif
